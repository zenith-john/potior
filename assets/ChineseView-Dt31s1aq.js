import{_ as c,c as u,o as a,a as o,g as p,f as d,w as m,v as f,b as y,F as h,r as g,t as b,d as _,e as v}from"./index-DkCYpDbZ.js";function w(i,e,t){return e>=i.length||e<0?i:i.substring(0,e)+t+i.substring(e+1)}const k={data(){return{text:"",words:[],word_data:[],rules:[],dict:{},has_more:!1}},mounted(){fetch("word_data.txt").then(i=>{if(!i.ok)throw new Error(`HTTP error! Status: ${i.status}`);return i.text()}).then(i=>{this.word_data=i.split(/\s/),console.log("Word data loaded!")}),fetch("char.json").then(i=>{if(!i.ok)throw new Error(`HTTP error! Status: ${i.status}`);return i.text()}).then(i=>{let e=JSON.parse(i);for(let t in e){for(let s in e[t].pinyin)e[t].pinyin[s]=this.convertPronouceChar(e[t].pinyin[s]);this.dict[e[t].char]=e[t]}console.log("Character data loaded!")})},computed:{},methods:{parse(i){let e=/[^\x00-\x7F]|{[\s]*([a-z_*]*[0-4]?)([\s]+[\d]+)?[\s]*}/g,t=i.matchAll(e);this.rules=[];for(let s of t)this.rules.push(this.matchToRule(s));console.log(this.rules.length)},matchToRule(i){return i[1]==null?i[0]:{pronounce:new RegExp(this.convertPronouce(i[1])),strokes:i[2]==null?null:parseInt(i[2])}},convertPronouce(i){let e=i;return e!=""&&!e[i.length-1].match(/[0-4]/)&&(e+="[0-4]"),e=e.replace(/\*/g,".*"),e=e.replace(/_/g,"."),"^"+e+"$"},searchWords(){this.parse(this.text),this.words=[],this.has_more=!1;let i=0;for(let e of this.word_data)if(this.isValidatedWord(e)){if(i>=100){this.has_more=!0;break}this.words.push(e),console.log(e.length),i++}},convertPronouceChar(i){let e=i.split(" ");if(e.length>1){let r="";for(let n in e)r+=this.convertPronouce(e[n]);return r}let t=i,s={ā:["a","1"],á:["a","2"],ǎ:["a","3"],à:["a","4"],ō:["o","1"],ó:["o","2"],ǒ:["o","3"],ò:["o","4"],ē:["e","1"],é:["e","2"],ě:["e","3"],è:["e","4"],ī:["i","1"],í:["i","2"],ǐ:["i","3"],ì:["i","4"],ū:["u","1"],ú:["u","2"],ǔ:["u","3"],ù:["u","4"],ǖ:["v","1"],ǘ:["v","2"],ǚ:["v","3"],ǜ:["v","4"],ḿ:["m","2"],ń:["n","2"],ň:["n","3"]},l=!0;for(let r=0;r<i.length;r++)if(i[r]in s){let n=i[r];t=w(i,r,s[n][0]),t+=s[n][1],l=!1;break}return l&&(t+="0"),t},isValidatedWord(i){if([...i].length!=this.rules.length)return!1;for(let e=0;e<[...i].length;e++)if(!this.isValidatedChar([...i][e],this.rules[e]))return!1;return!0},isValidatedChar(i,e){return typeof e=="string"?i==e:!(e.pronounce!=null&&!this.isValidatedPronounce(i,e.pronounce)||e.strokes!=null&&!this.isValidatedStrokes(i,e.strokes))},isValidatedPronounce(i,e){if(!(i in this.dict))return!1;for(let t=0;t<this.dict[i].pinyin.length;t++)if(this.dict[i].pinyin[t].match(e))return!0;return!1},isValidatedStrokes(i,e){return i in this.dict?this.dict[i].strokes==e:!1}}},C={for:"text"},x={key:0};function T(i,e,t,s,l,r){return a(),u(h,null,[o("div",null,[e[2]||(e[2]=d(" Nutri for Chinese words (Version 0.2): ")),o("label",C,[m(o("input",{"onUpdate:modelValue":e[0]||(e[0]=n=>l.text=n)},null,512),[[f,l.text]])]),o("button",{onClick:e[1]||(e[1]=(...n)=>r.searchWords&&r.searchWords(...n))},"search")]),o("div",null,[e[3]||(e[3]=d(" Findings: ")),o("ul",null,[(a(!0),u(h,null,g(l.words,n=>(a(),u("li",null,b(n),1))),256))]),l.has_more?(a(),u("p",x,"The above are first 100 results. Please give more restrictions if you don't find desired answer. ")):y("",!0)]),e[4]||(e[4]=p('<div> Explanation: <ul><li>The tool is to find Chinese words with some restriction on pronunciation or stroke numbers.</li><li>Only <em>Simplified Chinese</em> is supported.</li><li>Every character description should be embraced by {}.</li><li>The general pronunciation is given by pinyin but the tone is given by number (0 for light tone). For example, “课” = ke4. You can use * to represent arbitrary number of characters and _ to represent one character.</li><li>The possible second field in braces suggest the strokes number of character.</li><li>Only first 100 results are shown.</li><li>The missing characters in Chinese character data (See Acknowledgements for the source) will not match any pronunciation or stroke description.</li></ul> Examples: <ul><li>{hun} {mi} =&gt; 昏迷 ……</li><li>印 {d*4} =&gt; 印度 ……</li><li>{* 10} {* 12} {* 9} =&gt; 莫斯科 ……</li></ul></div><div> Acknowledgements: <ul><li>The Chinese character data (pronunciation and strokes) are from <a href="https://github.com/mapull/chinese-dictionary/">https://github.com/mapull/chinese-dictionary/</a>. (With some mistakes fixed) </li><li>The currently used word data are from <ul><li><a href="https://github.com/rime/rime-pinyin-simp/blob/master/pinyin_simp.dict.yaml">pinyin_simp.dict.yaml</a></li><li><a href="https://github.com/rime/rime-luna-pinyin/blob/master/luna_pinyin.dict.yaml">luna_pinyin.dict.yaml</a></li><li><a href="https://github.com/renyijiu/rime/blob/master/luna_pinyin.extended.dict.yaml">luna_pinyin.extended.dict.yaml</a></li><li><a href="https://github.com/renyijiu/rime/blob/master/luna_pinyin.hanyu.dict.yaml">luna_pinyin.hanyu.dict.yaml</a></li><li><a href="https://github.com/renyijiu/rime/blob/master/luna_pinyin.poetry.dict.yaml">luna_pinyin.poetry.dict.yaml</a></li><li><a href="https://github.com/renyijiu/rime/blob/master/luna_pinyin.chengyusuyu.dict.yaml">luna_pinyin.chengyusuyu.dict.yaml</a></li></ul> containing 513095 words(?). </li><li> The Simplified-Traditional Chinese conversion is worked out by <a href="https://github.com/BYVoid/OpenCC">OpenCC</a>. </li></ul></div><div> Update Note: <ul><li> Version 0.2: <ul><li> The word dictionary is expanded. </li><li> You can specify the character directly now. </li></ul></li><li>Version 0.1: First published version.</li></ul></div>',3))],64)}const V=c(k,[["render",T]]),P=_({__name:"ChineseView",setup(i){return(e,t)=>(a(),v(V))}});export{P as default};
