import{_ as c,c as u,o as a,a as s,g as p,f as d,w as m,v as f,b as y,F as h,r as g,t as b,d as _,e as w}from"./index-TMr05zJC.js";function v(e,i,t){return i>=e.length||i<0?e:e.substring(0,i)+t+e.substring(i+1)}const k={data(){return{text:"",words:[],word_data:[],rules:[],dict:{},count:1}},mounted(){fetch("word_data.txt").then(e=>{if(!e.ok)throw new Error(`HTTP error! Status: ${e.status}`);return e.text()}).then(e=>{this.word_data=e.split(/\s/),console.log("Word data loaded!")}),fetch("char.json").then(e=>{if(!e.ok)throw new Error(`HTTP error! Status: ${e.status}`);return e.text()}).then(e=>{let i=JSON.parse(e);for(let t in i){for(let o in i[t].pinyin)i[t].pinyin[o]=this.convertPronouceChar(i[t].pinyin[o]);this.dict[i[t].char]=i[t]}console.log("Character data loaded!")})},computed:{},methods:{parse(e){let i=/[^\x00-\x7F]|{[\s]*([a-z_*]*[0-4]?)([\s]+[\d]+)?[\s]*}/g,t=e.matchAll(i);this.rules=[];for(let o of t)this.rules.push(this.matchToRule(o));console.log(this.rules.length)},matchToRule(e){return e[1]==null?e[0]:{pronounce:new RegExp(this.convertPronouce(e[1])),strokes:e[2]==null?null:parseInt(e[2])}},convertPronouce(e){let i=e;return i!=""&&!i[e.length-1].match(/[0-4]/)&&(i+="[0-4]"),i=i.replace(/\*/g,".*"),i=i.replace(/_/g,"."),"^"+i+"$"},searchWords(){this.parse(this.text),this.words=[],this.count=0;for(let e of this.word_data)if(this.isValidatedWord(e)){if(this.count>=100)break;this.words.push(e),console.log(e.length),this.count++}},convertPronouceChar(e){let i=e.split(" ");if(i.length>1){let r="";for(let n in i)r+=this.convertPronouce(i[n]);return r}let t=e,o={ā:["a","1"],á:["a","2"],ǎ:["a","3"],à:["a","4"],ō:["o","1"],ó:["o","2"],ǒ:["o","3"],ò:["o","4"],ē:["e","1"],é:["e","2"],ě:["e","3"],è:["e","4"],ī:["i","1"],í:["i","2"],ǐ:["i","3"],ì:["i","4"],ū:["u","1"],ú:["u","2"],ǔ:["u","3"],ù:["u","4"],ǖ:["v","1"],ǘ:["v","2"],ǚ:["v","3"],ǜ:["v","4"],ḿ:["m","2"],ń:["n","2"],ň:["n","3"]},l=!0;for(let r=0;r<e.length;r++)if(e[r]in o){let n=e[r];t=v(e,r,o[n][0]),t+=o[n][1],l=!1;break}return l&&(t+="0"),t},isValidatedWord(e){if([...e].length!=this.rules.length)return!1;for(let i=0;i<[...e].length;i++)if(!this.isValidatedChar([...e][i],this.rules[i]))return!1;return!0},isValidatedChar(e,i){return typeof i=="string"?e==i:!(i.pronounce!=null&&!this.isValidatedPronounce(e,i.pronounce)||i.strokes!=null&&!this.isValidatedStrokes(e,i.strokes))},isValidatedPronounce(e,i){if(!(e in this.dict))return!1;for(let t=0;t<this.dict[e].pinyin.length;t++)if(this.dict[e].pinyin[t].match(i))return!0;return!1},isValidatedStrokes(e,i){return e in this.dict?this.dict[e].strokes==i:!1}}},C={for:"text"},x={key:0},V={key:1};function T(e,i,t,o,l,r){return a(),u(h,null,[s("div",null,[i[2]||(i[2]=d(" Nutri for Chinese words (Version 0.2.1): ")),s("label",C,[m(s("input",{"onUpdate:modelValue":i[0]||(i[0]=n=>l.text=n)},null,512),[[f,l.text]])]),s("button",{onClick:i[1]||(i[1]=(...n)=>r.searchWords&&r.searchWords(...n))},"search")]),s("div",null,[i[3]||(i[3]=d(" Findings: ")),s("ul",null,[(a(!0),u(h,null,g(l.words,n=>(a(),u("li",null,b(n),1))),256))]),l.count==100?(a(),u("p",x,"The above are first 100 results. Please give more restrictions if you don't find desired answer. ")):l.count==0?(a(),u("p",V,"No result found.")):y("",!0)]),i[4]||(i[4]=p('<div> Explanation: <ul><li>The tool is to find Chinese words with some restriction on pronunciation or stroke numbers.</li><li>Only <em>Simplified Chinese</em> is supported.</li><li>Every character description should be embraced by {}.</li><li>The general pronunciation is given by pinyin but the tone is given by number (0 for light tone). For example, “课” = ke4. You can use * to represent arbitrary number of characters and _ to represent one character.</li><li>The possible second field in braces suggest the strokes number of character.</li><li>Only first 100 results are shown.</li><li>The missing characters in Chinese character data (See Acknowledgements for the source) will not match any pronunciation or stroke description.</li></ul> Examples: <ul><li>{hun} {mi} =&gt; 昏迷 ……</li><li>印 {d*4} =&gt; 印度 ……</li><li>{* 10} {* 12} {* 9} =&gt; 莫斯科 ……</li></ul></div><div> Acknowledgements: <ul><li>The Chinese character data (pronunciation and strokes) are from <a href="https://github.com/mapull/chinese-dictionary/">https://github.com/mapull/chinese-dictionary/</a>. (With some mistakes fixed) </li><li>The currently used word data are from <ul><li><a href="https://github.com/rime/rime-pinyin-simp/blob/master/pinyin_simp.dict.yaml">pinyin_simp.dict.yaml</a></li><li><a href="https://github.com/rime/rime-luna-pinyin/blob/master/luna_pinyin.dict.yaml">luna_pinyin.dict.yaml</a></li><li><a href="https://github.com/renyijiu/rime/blob/master/luna_pinyin.extended.dict.yaml">luna_pinyin.extended.dict.yaml</a></li><li><a href="https://github.com/renyijiu/rime/blob/master/luna_pinyin.hanyu.dict.yaml">luna_pinyin.hanyu.dict.yaml</a></li><li><a href="https://github.com/renyijiu/rime/blob/master/luna_pinyin.poetry.dict.yaml">luna_pinyin.poetry.dict.yaml</a></li><li><a href="https://github.com/renyijiu/rime/blob/master/luna_pinyin.chengyusuyu.dict.yaml">luna_pinyin.chengyusuyu.dict.yaml</a></li></ul> containing 513095 words(?). </li><li> The Simplified-Traditional Chinese conversion is worked out by <a href="https://github.com/BYVoid/OpenCC">OpenCC</a>. </li></ul></div><div> Update Note: <ul><li> Version 0.2.1: <ul><li>Show information if no result is found.</li></ul></li><li> Version 0.2: <ul><li> The word dictionary is expanded. </li><li> You can specify the character directly now. </li></ul></li><li>Version 0.1: First published version.</li></ul></div>',3))],64)}const F=c(k,[["render",T]]),P=_({__name:"ChineseView",setup(e){return(i,t)=>(a(),w(F))}});export{P as default};
